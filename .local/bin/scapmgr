#!/bin/sh
# TODO: Make this not hang on half of the options for whatever bs reason

# scapmgr handles taking and storing/uploading screencaps
# first argument is the type of screencap to take, region or fullscreen (-r or -f)
SCAP_TYPE="$1"
# second argument is what to do with the screencap, store it, upload it, copy to clipboard, or store & upload it (-s, -u, -c, -su)
SCAP_HANDLE="$2"
# the utility used to perform the screen capture
SCAP_UTIL="maim"
# the directory where stored screencaps are stored
SCAP_DIR="/hitoha/Pictures/screencaps"
# the site used for the upload handler
SCAP_UPLOAD_SITE="https://ataeru.trigex.moe"
# password for the upload site
SCAP_UPLOAD_SITE_PASS=""
# the util used to spawn a notification on the scap completion
SCAP_NOTIF_UTIL="dunstify -u low"

# exit on missing flags
[ -z "$SCAP_TYPE" ] && echo "No screencap type flag was provided!" && exit 1
[ -z "$SCAP_HANDLE" ] && echo "No screencap handler type flag was provided!" && exit 1

# translate type flags to SCAP_UTIL arguments
case "$SCAP_TYPE" in
    # region (maim region/window flag is -s)
    "-r") SCAP_UTIL_TYPEARG="-s" ;;
    # fullscreen (maim by default takes fullscreen screenshots)
    "-f") SCAP_UTIL_TYPEARG="" ;;
esac

# define scap handler functions
# all of them expect stdin to be the raw scap data!
# they should additionally define print a notification message to stdout
store_scap() {
    # get unix timestamp for filename, join with scap_dir
    SCAP_OUT_PATH="$SCAP_DIR/$(date +'%s').png"
    # readout stdin to the path
    cat >$SCAP_OUT_PATH
    # set notif message
    echo "Captured to $SCAP_OUT_PATH"
}

upload_scap() {
    # temp scap path
    SCAP_TEMP_PATH="/tmp/scap.png"
    # readout stdin to a file in /tmp
    cat >"$SCAP_TEMP_PATH"
    # upload file with curl, storing curl's output in a variable
    SCAP_URL=$(curl -F"file=@$SCAP_TEMP_PATH" -F"key=$SCAP_UPLOAD_SITE_PASS" $SCAP_UPLOAD_SITE)
    # set notify message
    echo "$SCAP_URL"
}

upload_store_scap() {
    # pass stdin to both the upload and store handlers
    # make sure we dispose the store handler's output
    (cat - | upload_scap)
    (cat - | store_scap) 1>/dev/null
}

copy_clip_scap() {
    # stdin to xclip
    cat - | xclip -selection clipboard -t image/png && echo "Screencap captured and copied to clipboard"
}

# translate handle flags to their functions'
case "$SCAP_HANDLE" in
    "-s") SCAP_HANDLE_FUNC="store_scap" ;;
    "-u") SCAP_HANDLE_FUNC="upload_scap" ;;
    "-su") SCAP_HANDLE_FUNC="upload_store_scap" ;;
    "-c") SCAP_HANDLE_FUNC="copy_clip_scap" ;;
esac

# take the screencap, and pipe it to the chosen handler function
HANDLER_MESSAGE=$($SCAP_UTIL $SCAP_UTIL_TYPEARG | $SCAP_HANDLE_FUNC)

# spawn notification
$SCAP_NOTIF_UTIL "$HANDLER_MESSAGE"

# copy url if upload handle type
[ "$SCAP_HANDLE" = "-su" ] || [ "$SCAP_HANDLE" = "-u" ] && echo "$HANDLER_MESSAGE" | xclip -sel clip

# our work here is done!
return 0
